{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"07. Exploration methods for DQN","provenance":[{"file_id":"1LEFxTw89uSBgcPYDEWrQ-U0AHrEFO4iF","timestamp":1637778813225},{"file_id":"1YuJIEbYn92x0FWgCOz6ghKmL6kZmytME","timestamp":1637768421186},{"file_id":"1c3XVgwQv_aDCfkyxLJjG-isePrWuI0IK","timestamp":1637754464423}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.3"},"widgets":{"application/vnd.jupyter.widget-state+json":{"a15c82aae741429fb06f5227c9e979ac":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_89f702105cf94e4584062d025a931226","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_2baf4897ac294150a8b3a14d1e14df38","IPY_MODEL_5fafa8b7879c405f946e08e93f3a0bcf","IPY_MODEL_f622237a211349e5ba2e87545e5dfc74"]}},"89f702105cf94e4584062d025a931226":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"2baf4897ac294150a8b3a14d1e14df38":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_3cb64aca6b224404be7381ed4b73a084","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"100%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_1997b6f064944187ab626254fcd397c6"}},"5fafa8b7879c405f946e08e93f3a0bcf":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_view_name":"ProgressView","style":"IPY_MODEL_6341b9b17528438ba888df93c1e7291b","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":100000,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":100000,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_f10a857637dd45a182b06f459c934b48"}},"f622237a211349e5ba2e87545e5dfc74":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_98b8f5931ff0494da7cb49802e62cbea","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 100000/100000 [12:29&lt;00:00, 106.68it/s, Mean reward: -200.00, Loss: 0.38]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_dfbf01b4fe0f47a39e24213345fe373f"}},"3cb64aca6b224404be7381ed4b73a084":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"1997b6f064944187ab626254fcd397c6":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"6341b9b17528438ba888df93c1e7291b":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"f10a857637dd45a182b06f459c934b48":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"98b8f5931ff0494da7cb49802e62cbea":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"dfbf01b4fe0f47a39e24213345fe373f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"a5e1b0ad8de34855883560a23b6df9e3":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_a0a353afea444ff3af6082054d5d96c6","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_dfa0de2234644cb79ea371eb077547a5","IPY_MODEL_c44278fa66144af19f12e0ac79807c0d","IPY_MODEL_8aac0b27fdfd405b98666395034630d2"]}},"a0a353afea444ff3af6082054d5d96c6":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"dfa0de2234644cb79ea371eb077547a5":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_97e0c5029bf94fff8120659375f6844c","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 80%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_a2499118753c47b9ab4049071fa49fa1"}},"c44278fa66144af19f12e0ac79807c0d":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_view_name":"ProgressView","style":"IPY_MODEL_6d3449f3907442ba98c9dcd31f745cad","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"","max":100000,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":79898,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_adf50729eb004b32aece84b972dd429c"}},"8aac0b27fdfd405b98666395034630d2":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_f7aecaab847748a2a8e3b8d140c423d9","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 79898/100000 [14:16&lt;04:22, 76.70it/s, Mean reward: -172.90, Loss: 0.36]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_506ebbf697264337aa94f2496f619963"}},"97e0c5029bf94fff8120659375f6844c":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"a2499118753c47b9ab4049071fa49fa1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"6d3449f3907442ba98c9dcd31f745cad":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"adf50729eb004b32aece84b972dd429c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"f7aecaab847748a2a8e3b8d140c423d9":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"506ebbf697264337aa94f2496f619963":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"markdown","metadata":{"id":"G3yAttG1RAb_"},"source":["# Reinforcement Learning: Deep Q-Network"]},{"cell_type":"code","metadata":{"id":"_-d5zkDXRAcB"},"source":["!pip install Box2D  > /dev/null 2>&1\n","!pip install gym[all] pyvirtualdisplay > /dev/null 2>&1\n","!pip install tqdm > /dev/null 2>&1\n","!apt update > /dev/null 2>&1\n","!apt install -y xvfb python-opengl ffmpeg > /dev/null 2>&1\n","!pip install pyvirtualdisplay > /dev/null 2>&1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"kjlpU7YrRAcF"},"source":["import gym\n","import time\n","import matplotlib.pyplot as plt\n","import copy\n","import random\n","import numpy as np\n","from collections import deque\n","# PyTorch\n","import torch\n","from torch import nn\n","from torch import optim\n","import torch.nn.functional as F\n","from tqdm.notebook import tqdm\n","\n","# Устройство, на котором будет работать PyTorch.\n","device = torch.device(\"cpu\") # GPU trains faster\n","\n","%matplotlib inline"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nBCIFu68RAcH"},"source":["#### Используйте клетку ниже если ноутбук запущен на Google Colab"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gA4ffE8ZRAcH","executionInfo":{"status":"ok","timestamp":1637777881311,"user_tz":-180,"elapsed":423,"user":{"displayName":"Oleg Svidchenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtLmACOAq82avmVoshNzzAaxoCoazUityt1Bk5=s64","userId":"05803297682533666498"}},"outputId":"67edfd79-33cf-4c6f-d799-787b82c748ce"},"source":["from pyvirtualdisplay import Display\n","\n","display = Display(visible=0, size=(1400, 900))\n","display.start()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<pyvirtualdisplay.display.Display at 0x7f3ade05f510>"]},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"AcoJhYczRAcK"},"source":["#### Код для визуализации среды"]},{"cell_type":"code","metadata":{"id":"44Fsds1gRAcK"},"source":["import matplotlib.animation as animation\n","from IPython import display as ipythondisplay\n","from IPython.display import HTML\n","\n","def init_figure():\n","    fig, ax = plt.subplots(figsize=(8, 6), nrows=1, ncols=1)\n","    ax.grid(False)\n","    ax.set_xticklabels([])\n","    ax.set_yticklabels([])\n","    plt.tight_layout()\n","    return fig, ax\n","\n","def show_video(frames):\n","    fig, ax = init_figure()\n","    ims = []\n","    for f in frames:\n","        im = plt.imshow(f, animated=True)\n","        ims.append([im])\n","\n","    anim = animation.ArtistAnimation(fig, ims, interval=25, blit=True, repeat_delay=1000)\n","    ipythondisplay.display(HTML(anim.to_jshtml()))\n","    plt.close()\n","    \n","def visualise(agent, episodes=1):\n","    env = gym.make(\"LunarLander-v2\")\n","    frames = []\n","    for i in range(episodes):\n","        state = env.reset()\n","        done = False\n","        while not done:\n","            frames.append(env.render(mode=\"rgb_array\"))\n","            state, _, done, _ = env.step(agent.get_action(state))\n","    show_video(frames)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_Fz7Vdi4RAcM"},"source":["#### Expirience Replay\n","Код, реализующий простой experience replay. Метод `.add(transition)` добавляет `transition` в буфер, метод `.sample(size)` возвращает батч указанного размера."]},{"cell_type":"code","metadata":{"id":"6V3v6Y0SRAcN"},"source":["class ExpirienceReplay:\n","    def __init__(self, size=10000):\n","        self.data = deque(maxlen=size)\n","    \n","    def add(self, transition):\n","        self.data.append(transition)\n","        \n","    def sample(self, size):\n","        batch = random.sample(self.data, size)\n","        batch = list(zip(*batch))\n","        \n","        state, action, next_state, reward, done = batch\n","        state = torch.tensor(state, dtype=torch.float32, device=device)\n","        next_state = torch.tensor(next_state, dtype=torch.float32, device=device)\n","        reward = torch.tensor(reward, dtype=torch.float32, device=device).view(-1)\n","        done = torch.tensor(done, device=device)\n","        action = torch.tensor(action, device=device).view(-1, 1) # batch_size x 1\n","        \n","        return state, action, next_state, reward, done"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7Ihqbb6k03Of"},"source":["## Exploration Method Interface"]},{"cell_type":"code","metadata":{"id":"sqO7Udxv07W1"},"source":["class ExplorationMethod:\n","    def add_intrinsic_reward_and_update(self, batch):\n","        return batch"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"skVmgbZ4RAcP"},"source":["## DQN"]},{"cell_type":"code","metadata":{"id":"MZZUM8C-RAcQ"},"source":["class DQNModel(nn.Module):\n","    def __init__(self, state_size, action_size, hidden_size=128):\n","        super().__init__()\n","        self.model = nn.Sequential(\n","            nn.Linear(state_size, hidden_size),\n","            nn.ReLU(),\n","            nn.Linear(hidden_size, hidden_size),\n","            nn.ReLU(),\n","            nn.Linear(hidden_size, action_size))\n","    \n","    def forward(self, x):\n","        return self.model(x) # self.model.forward(x)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mc9gXaCQCgyg","executionInfo":{"status":"ok","timestamp":1637777881722,"user_tz":-180,"elapsed":414,"user":{"displayName":"Oleg Svidchenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtLmACOAq82avmVoshNzzAaxoCoazUityt1Bk5=s64","userId":"05803297682533666498"}},"outputId":"47b22200-ce28-448e-e951-3250eab162ba"},"source":["model = DQNModel(4, 2)\n","x = torch.randn((16, 4))\n","model(x)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[ 0.0165,  0.0773],\n","        [ 0.0233,  0.0179],\n","        [ 0.0202,  0.0568],\n","        [-0.0533,  0.1335],\n","        [ 0.0160,  0.0287],\n","        [ 0.0007,  0.0448],\n","        [ 0.0964,  0.1427],\n","        [-0.0163,  0.1549],\n","        [ 0.0435,  0.0440],\n","        [-0.0872,  0.0432],\n","        [-0.0115,  0.0683],\n","        [ 0.0113,  0.1282],\n","        [-0.0264,  0.0458],\n","        [ 0.1310,  0.1743],\n","        [-0.0113,  0.0503],\n","        [-0.0344,  0.0386]], grad_fn=<AddmmBackward0>)"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"hYF_itzuRAcc"},"source":["class DQN(nn.Module):\n","    def __init__(self, state_size, action_size, gamma=0.99, hidden_size=64, lr=1e-3, update_target_every=1, tau=0.005):\n","        super().__init__()\n","        self.model = DQNModel(state_size, action_size, hidden_size)\n","        self.target_model = copy.deepcopy(self.model)\n","        self.model.to(device)\n","        self.target_model.to(device)\n","        self.gamma = gamma\n","        self.update_target_every = update_target_every\n","        self.tau = tau\n","        self._steps = 0\n","        \n","        self.optimizer = optim.Adam(self.model.parameters(), lr=lr)\n","        \n","    def get_action(self, state):\n","        with torch.no_grad():\n","            state = torch.tensor([state], dtype=torch.float32, device=device)\n","            q = self.model(state)[0]\n","        return q.argmax().item()\n","    \n","    def compute_loss(self, batch):\n","        state, action, next_state, reward, done = batch\n","        \n","        # MSE(Q(s, a), r + gamma * max_a' Q_target(s', a'))\n","        with torch.no_grad():\n","            target_q = self.target_model(next_state).max(dim=-1)[0].view(-1) # batch_size\n","            target_q[done] = 0.0\n","            target_q = reward + self.gamma * target_q\n","        \n","        q = self.model(state).gather(1, action).view(-1) # batch_size\n","        \n","        loss = F.smooth_l1_loss(q, target_q)\n","        #loss = F.mse_loss(q, target_q)\n","        \n","        return loss\n","    \n","    def update(self, batch):\n","        loss = self.compute_loss(batch)\n","        self.optimizer.zero_grad()\n","        loss.backward()\n","        self.optimizer.step()\n","        \n","        # Soft update. В оригинальном алгоритме используется hard update, \n","        # однако такой вариант как правило позволяет обучаться быстрее.\n","        self._steps += 1\n","        if self._steps % self.update_target_every == 0:\n","            for target_param, param in zip(self.target_model.parameters(), self.model.parameters()):\n","                target_param.data.copy_((1-self.tau) * target_param.data + self.tau * param.data)\n","        return loss.item()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zawvOYDCRAcg"},"source":["#### Немного кода для обучения и визуализации DQN"]},{"cell_type":"code","metadata":{"id":"j7MBJ8X5RAch"},"source":["ENV_NAME, STATE_SIZE, ACTION_SIZE = \"MountainCar-v0\", 2, 3\n","#ENV_NAME, STATE_SIZE, ACTION_SIZE = \"LunarLander-v2\", 8, 4\n","\n","def test(dqn, episodes=10):\n","    rewards = []    \n","    env = gym.make(ENV_NAME)\n","    for _ in range(episodes):\n","        sum_reward = 0\n","        done = False\n","        state = env.reset()\n","        while not done:\n","            state, reward, done, _ = env.step(dqn.get_action(state))\n","            sum_reward += reward\n","        rewards.append(sum_reward)\n","    return np.mean(rewards), np.std(rewards)\n","\n","def train(dqn, exploration_method, timesteps=100000, batch_size=256, \n","          buffer_size=100000, \n","          eps_max=1.0, eps_min=0.1,\n","          start_train=10000, test_every=1000, test_count=10):\n","    env = gym.make(ENV_NAME)\n","    env.seed(0)\n","    random.seed(0)\n","    done = False\n","    state = env.reset()\n","    buffer = ExpirienceReplay(buffer_size)\n","    loss_sum = 0\n","    loss_ctn = 0\n","    eps = eps_max\n","    \n","    log_ts = []\n","    log_mean = []\n","    log_std = []\n","    \n","    rng = tqdm(range(timesteps))\n","    for t in rng:\n","        if done:\n","            done = False\n","            state = env.reset()\n","        action = dqn.get_action(state) if eps > random.random() else env.action_space.sample()\n","        next_state, reward, done, _ = env.step(action)\n","        buffer.add((state, action, next_state, reward, done))\n","        state = next_state\n","        \n","        if t > start_train:\n","            batch = buffer.sample(batch_size)\n","            batch = exploration_method.add_intrinsic_reward_and_update(batch)\n","            loss = dqn.update(batch)\n","            loss_sum += loss\n","            loss_ctn += 1\n","            eps = eps_max * (eps_min / eps_max) ** (t / timesteps)\n","            \n","            if t % test_every == 0:\n","                log_ts.append(t)\n","                mean, std = test(dqn, test_count)\n","                log_mean.append(mean)\n","                log_std.append(std)\n","                rng.set_postfix_str(f\"Mean reward: {mean:.2f}, Loss: {(loss_sum / loss_ctn):.2f}\")\n","                loss_sum = 0\n","                loss_ctn = 0\n","    return np.array(log_ts), np.array(log_mean), np.array(log_std)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fZqISCbXRAck"},"source":["def build_plot(xs, means, stds, labels, figsize=(12, 8)):\n","    colors = [\n","        (0.8, 0.0, 0.0),\n","        (0.0, 0.8, 0.0),\n","        (0.0, 0.0, 0.8),\n","        (0.6, 0.7, 0.0),\n","        (0.0, 0.5, 0.8)\n","    ]\n","    x_min = max([x[0] for x in xs])\n","    x_max = min([x[-1] for x in xs])\n","    plt.figure(figsize=figsize)\n","    for x, mean, std, label, color in zip(xs, means, stds, labels, colors):\n","        plt.fill_between(x, mean - 2*std, mean + 2*std, color=color, alpha=0.2)\n","        plt.plot(x, mean, label=label, color=color)\n","    plt.legend()\n","    plt.xlim(x_min, x_max)\n","    plt.grid()\n","    plt.tight_layout()\n","    plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"kVBE7pz8RAcn"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"m0nfAX0TRAcp"},"source":["xs, means, stds, labels = [], [], [], []"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5DFgvB_IRAcr"},"source":["# Exploration"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":654,"referenced_widgets":["a15c82aae741429fb06f5227c9e979ac","89f702105cf94e4584062d025a931226","2baf4897ac294150a8b3a14d1e14df38","5fafa8b7879c405f946e08e93f3a0bcf","f622237a211349e5ba2e87545e5dfc74","3cb64aca6b224404be7381ed4b73a084","1997b6f064944187ab626254fcd397c6","6341b9b17528438ba888df93c1e7291b","f10a857637dd45a182b06f459c934b48","98b8f5931ff0494da7cb49802e62cbea","dfbf01b4fe0f47a39e24213345fe373f"]},"id":"uEzKl9mJRAcr","executionInfo":{"status":"ok","timestamp":1637765369716,"user_tz":-180,"elapsed":750067,"user":{"displayName":"Oleg Svidchenko","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtLmACOAq82avmVoshNzzAaxoCoazUityt1Bk5=s64","userId":"05803297682533666498"}},"outputId":"ea99ad5b-6b5f-4b25-aa2e-689d484fd0a7"},"source":["dqn = DQN(STATE_SIZE, ACTION_SIZE, hidden_size=256, tau=0.002, lr=2.5e-4, gamma=0.99)\n","no_exploration = ExplorationMethod()\n","x, mean, std = train(dqn, no_exploration, eps_max=0.4, eps_min=0.1, timesteps=100000)\n","xs.append(x)\n","means.append(mean)\n","stds.append(std)\n","labels.append(f\"DQN\")\n","\n","build_plot(xs, means, stds, labels)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"a15c82aae741429fb06f5227c9e979ac","version_minor":0,"version_major":2},"text/plain":["  0%|          | 0/100000 [00:00<?, ?it/s]"]},"metadata":{}},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:17: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  ../torch/csrc/utils/tensor_new.cpp:201.)\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 864x576 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"8FkQSYOWRAcu"},"source":["xs, means, stds, labels = [], [], [], []\n","dqn = DQN(STATE_SIZE, ACTION_SIZE, hidden_size=256, tau=0.002, lr=2.5e-4, gamma=0.99)\n","no_exploration = ExplorationMethod()\n","x, mean, std = train(dqn, no_exploration, eps_max=0.4, eps_min=0.1, timesteps=100000)\n","xs.append(x)\n","means.append(mean)\n","stds.append(std)\n","labels.append(f\"DQN\")\n","\n","build_plot(xs, means, stds, labels)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OHMcYa-YRAcw"},"source":["class CuriosityDrivenExploration(ExplorationMethod):\n","    def __init__(self, state_size, action_size, hidden_size=128, latent_size=64, lr=2e-5, coef=20):\n","        self.encoder = nn.Sequential(\n","            nn.Linear(state_size, hidden_size),\n","            nn.ReLU(),\n","            nn.Linear(hidden_size, hidden_size),\n","            nn.ReLU(),\n","            nn.Linear(hidden_size, latent_size)\n","        )\n","        self.idf_predictor = nn.Sequential(\n","            nn.Linear(2 * latent_size, hidden_size),\n","            nn.ReLU(),\n","            nn.Linear(hidden_size, hidden_size),\n","            nn.ReLU(),\n","            nn.Linear(hidden_size, action_size)\n","        )\n","        self.df_predictor = nn.Sequential(\n","            nn.Linear(action_size + latent_size, hidden_size),\n","            nn.ReLU(),\n","            nn.Linear(hidden_size, hidden_size),\n","            nn.ReLU(),\n","            nn.Linear(hidden_size, latent_size)\n","        )\n","        self.idf_optim = optim.Adam(list(self.idf_predictor.parameters()) + list(self.encoder.parameters()), lr=lr)\n","        self.df_optim = optim.Adam(self.df_predictor.parameters(), lr=lr)\n","        self.action_size = action_size\n","        self.coef = coef\n","\n","    def add_intrinsic_reward_and_update(self, batch):\n","        state, action, next_state, reward, done = batch\n","\n","        # IDF Update\n","        state_emb = self.encoder(state)\n","        next_state_emb = self.encoder(state)\n","        action_pred = self.idf_predictor(torch.cat([state_emb, next_state_emb], dim=-1))\n","        loss = F.cross_entropy(action_pred, action.view(-1))\n","        self.idf_optim.zero_grad()\n","        loss.backward()\n","        self.idf_optim.step()\n","\n","        # DF Update\n","        next_state_pred = self.df_predictor(torch.cat([\n","            state_emb.detach(), \n","            F.one_hot(action.view(-1), self.action_size)\n","        ], dim=-1))\n","        score = ((next_state_pred - next_state_emb.detach())**2).mean(-1)\n","        loss = score.mean()\n","        self.df_optim.zero_grad()\n","        loss.backward()\n","        self.df_optim.step()\n","\n","        return state, action, next_state, reward + self.coef * score, done"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fnfr4jeYRAcx"},"source":["class RandomNetworkDistillation(ExplorationMethod):\n","    def __init__(self, state_size, action_size, source_hidden_size=32, \n","                 target_hidden_size=512, latent_size=64, lr=2e-5, coef=20):\n","        self.target_net = nn.Sequential(\n","            nn.Linear(state_size, target_hidden_size),\n","            nn.ReLU(),\n","            nn.Linear(target_hidden_size, target_hidden_size),\n","            nn.ReLU(),\n","            nn.Linear(target_hidden_size, latent_size)\n","        )\n","        self.source_net = nn.Sequential(\n","            nn.Linear(state_size, source_hidden_size),\n","            nn.ReLU(),\n","            nn.Linear(source_hidden_size, source_hidden_size),\n","            nn.ReLU(),\n","            nn.Linear(source_hidden_size, latent_size)\n","        )\n","        self.optim = optim.Adam(self.source_net.parameters(), lr=lr)\n","        self.coef = coef\n","    \n","    def add_intrinsic_reward_and_update(self, batch):\n","        state, action, next_state, reward, done = batch\n","\n","        with torch.no_grad():\n","            embed_target = self.target_net(next_state)\n","        embed_pred = self.source_net(next_state)\n","        score = ((embed_target - embed_pred)**2).mean(-1)\n","        loss = score.mean()\n","        self.optim.zero_grad()\n","        loss.backward()\n","        self.optim.step()\n","        score.detach_()\n","\n","        return state, action, next_state, reward + score * self.coef, done"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yPmd9ewNRAc1"},"source":["dqn = DQN(STATE_SIZE, ACTION_SIZE, hidden_size=256, tau=0.002, lr=2.5e-4, gamma=0.99)\n","exploration = CuriosityDrivenExploration(STATE_SIZE, ACTION_SIZE)\n","x, mean, std = train(dqn, exploration, eps_max=0.4, eps_min=0.1, timesteps=100000)\n","xs.append(x)\n","means.append(mean)\n","stds.append(std)\n","labels.append(f\"Curiosity\")\n","\n","build_plot(xs, means, stds, labels)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4YInYkQwZM_m","colab":{"base_uri":"https://localhost:8080/","height":49,"referenced_widgets":["a5e1b0ad8de34855883560a23b6df9e3","a0a353afea444ff3af6082054d5d96c6","dfa0de2234644cb79ea371eb077547a5","c44278fa66144af19f12e0ac79807c0d","8aac0b27fdfd405b98666395034630d2","97e0c5029bf94fff8120659375f6844c","a2499118753c47b9ab4049071fa49fa1","6d3449f3907442ba98c9dcd31f745cad","adf50729eb004b32aece84b972dd429c","f7aecaab847748a2a8e3b8d140c423d9","506ebbf697264337aa94f2496f619963"]},"outputId":"6a734b05-561d-4754-a586-aa28f74f542b"},"source":["dqn = DQN(STATE_SIZE, ACTION_SIZE, hidden_size=256, tau=0.002, lr=2.5e-4, gamma=0.99)\n","exploration = RandomNetworkDistillation(STATE_SIZE, ACTION_SIZE)\n","x, mean, std = train(dqn, exploration, eps_max=0.4, eps_min=0.1, timesteps=100000)\n","xs.append(x)\n","means.append(mean)\n","stds.append(std)\n","labels.append(f\"RND\")\n","\n","build_plot(xs, means, stds, labels)"],"execution_count":null,"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"a5e1b0ad8de34855883560a23b6df9e3","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/100000 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"}]},{"cell_type":"code","metadata":{"id":"sjmz1AK2ZUUy"},"source":[""],"execution_count":null,"outputs":[]}]}